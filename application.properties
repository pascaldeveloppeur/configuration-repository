#Gateway
gateway-host=localhost
gateway-port=9000

# HTTP session timeout
server.servlet.session.timeout=2h

# LOGGING
logging.level.root=INFO
logging.level.org.springframework=DEBUG
logging.level.com.pascaldev=ERROR
logging.level.com.fasterxml=ERROR
logging.level.com.zaxxer.hikari=ERROR
logging.level.org.apache.activemq=ERROR
logging.level.org.hibernate=ERROR
logging.level.org.flywaydb=DEBUG
logging.level.com.netflix=DEBUG
logging.level.org.apache=ERROR
logging.file.name=//${user.home}/logs/${spring.application.name}-logs.log
logging.logback.rollingpolicy.max-file-size=1MB
logging.logback.rollingpolicy.max-history=50
management.endpoint.logfile.external-file=${logging.file.name}


# EUREKA
eureka-protocol=http
eureka.server.port=8761
eureka.instance.hostname=localhost
#eureka.instance.hostname=192.168.100.114
#eureka.instance.preferIpAddress=true
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.client.serviceUrl.defaultZone=${eureka-protocol}://${eureka.instance.hostname}:${eureka.server.port}/eureka/
eureka.instance.health-check-url-path=/actuator/health
eureka.client.registryFetchIntervalSeconds=5

management.endpoints.web.exposure.include=*
management.endpoints.restart.enabled=true

#Datasource
spring.datasource.url=jdbc:postgresql://localhost:5432/test
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.username=postgres
spring.datasource.password=12345

#Hibernate
spring.jpa.database=postgresql
spring.jpa.hibernate.ddl-auto=none
#spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation= true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.globally_quoted_identifiers=true
spring.datasource.hikari.connection-timeout=60000
#minimum number of idle connections maintained by HikariCP in a connection pool
spring.datasource.hikari.minimum-idle=0
#maximum pool size
spring.datasource.hikari.maximum-pool-size=3
#maximum idle time for connection
spring.datasource.hikari.idle-timeout=10000
# maximum lifetime in milliseconds of a connection in the pool after it is closed.
spring.datasource.hikari.max-lifetime=30000
spring.datasource.hikari.leak-detection-thleshold=3000

spring.flyway.baselineOnMigrate=true
spring.flyway.check-location=true
spring.flyway.locations=classpath:db/migration
spring.flyway.schemas=public
spring.flyway.enabled=true
spring.flyway.base-version=0
spring.flyway.base-description=init
spring.flyway.outOfOrder=true
spring.flyway.ignoreMissingMigrations=true

# KEYCLOAK
oauth2.base-url=http://localhost:8080
oauth2.admin-url=${oauth2.base-url}/auth
oauth2.use-admin-url=false
keycloak.enabled=true
keycloak.realm=dev
keycloak.auth-server-url=${oauth2.base-url}/auth
keycloak.always-refresh-token=true
keycloak.cors=true
keycloak.cors-max-age=0
keycloak.cors-allowed-methods=*
keycloak.cors-allowed-headers=*
keycloak.cors-exposed-headers=*
keycloak.principal-attribute=preferred_username


# OAUTH2
spring.security.oauth2.resourceserver.jwt.issuer-uri=${keycloak.auth-server-url}/realms/${keycloak.realm}
spring.security.oauth2.client.registration.keycloak.client-id=${keycloak.resource}
spring.security.oauth2.client.registration.keycloak.client-secret=${keycloak.credentials.secret}
spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username
spring.security.oauth2.client.registration.keycloak.scope=openid
spring.security.oauth2.client.provider.keycloak.issuer-uri=${keycloak.auth-server-url}/realms/${keycloak.realm}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs